# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: local-serve

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: local-serve
            asset_name: local-serve-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: local-serve
            asset_name: local-serve-linux-arm64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: local-serve
            asset_name: local-serve-darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: local-serve.exe
            asset_name: local-serve-windows-amd64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - uses: Swatinem/rust-cache@v2

      - name: Patch binary version
        shell: python
        run: |
          import os
          import re
          
          # Get version from tag
          tag = os.environ['GITHUB_REF_NAME']
          version = tag.lstrip('v')
          
          # Read Cargo.toml
          with open('Cargo.toml', 'r') as f:
              content = f.read()
          
          # Replace version line
          new_content = re.sub(
              r'^version\s*=\s*"[^"]*"',
              f'version = "{version}"',
              content,
              flags=re.MULTILINE
          )
          
          # Write back
          with open('Cargo.toml', 'w') as f:
              f.write(new_content)
          
          print(f"Updated version to {version}")

      - name: Install cross-compilation dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross

      - name: Build (non-Windows)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "${{ matrix.asset_name }}"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "${{ matrix.asset_name }}"
            chmod +x "${{ matrix.asset_name }}"
          fi

      - name: Generate SHA256
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            certutil -hashfile "${{ matrix.asset_name }}" SHA256 | grep -v "hash" | tr -d " " > "${{ matrix.asset_name }}.sha256"
          elif [ "${{ runner.os }}" = "macOS" ]; then
            shasum -a 256 "${{ matrix.asset_name }}" > "${{ matrix.asset_name }}.sha256"
          else
            sha256sum "${{ matrix.asset_name }}" > "${{ matrix.asset_name }}.sha256"
          fi

      - name: Upload Binary Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

      - name: Upload SHA256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.sha256
          asset_name: ${{ matrix.asset_name }}.sha256
          asset_content_type: text/plain
